docker exec -it multinodekafka-kafka1-1 bash

# list all consumer groups consuming from every topic
kafka-consumer-groups.sh --bootstrap-server kafka1:9092 --all-groups --list

kafka-consumer-groups.sh --bootstrap-server kafka1:9092 --all-groups --describe

# on a new terminal start the consumer jar
docker exec -it multinodekafka-kafka1-1 bash
java -jar simpleconsumer.jar

# consumer will consume all the messages in the topic
kafka-consumer-groups.sh --bootstrap-server kafka1:9092 --all-groups --describe
# Notice the lag reducing to 0


# on a new terminal start the consumer jar
docker exec -it multinodekafka_kafka1_1 bash
java -jar simpleconsumer.jar

# on a new terminal start the consumer jar
# stop both the consumers and run the producer again
docker exec -it multinodekafka_kafka1_1 bash
java -jar KafkaProducerDemo-0.0.1-SNAPSHOT-jar-with-dependencies.jar
java -jar KafkaProducerDemo-0.0.1-SNAPSHOT-jar-with-dependencies.jar

# lag will not be 0
kafka-consumer-groups.sh --bootstrap-server kafka1:9092 --all-groups --describe

# stop both the consumers & run the consumer group monitoring command again

# list all consumer groups consuming from every topic
kafka-consumer-groups.sh --bootstrap-server kafka1:9092 --all-groups --list
# Consumer list in the group will be blank

kafka-consumer-groups.sh --bootstrap-server kafka1:9092 --all-groups --describe
